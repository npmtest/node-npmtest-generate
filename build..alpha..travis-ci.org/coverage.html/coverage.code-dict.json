{"/home/travis/build/npmtest/node-npmtest-generate/test.js":"/* istanbul instrument in package npmtest_generate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generate/lib.npmtest_generate.js":"/* istanbul instrument in package npmtest_generate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generate = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generate = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generate/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generate && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generate\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generate.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_generate.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generate.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_generate.__dirname +\n                    '/lib.npmtest_generate.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generate/node_modules/generate/index.js":"/*!\n * generate <https://github.com/jonschlinkert/generate>\n *\n * Copyright (c) 2015-2016, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar debug = require('debug')('generate');\nvar Assemble = require('assemble-core');\nvar defaults = require('./lib/defaults');\nvar plugins = require('./lib/plugins');\nvar mixins = require('./lib/mixins');\nvar utils = require('./lib/utils');\nvar setArgs;\n\n/**\n * Create an instance of `Generate` with the given `options`\n *\n * ```js\n * var Generate = require('generate');\n * var generate = new Generate();\n * ```\n * @param {Object} `options` Settings to initialize with.\n * @api public\n */\n\nfunction Generate(options) {\n  if (!(this instanceof Generate)) {\n    return new Generate(options);\n  }\n\n  Assemble.call(this, options);\n  this.is('generate');\n  this.initGenerate(this.options);\n\n  if (!setArgs) {\n    setArgs = true;\n    this.base.option(utils.argv);\n  }\n}\n\n/**\n * Extend `Generate`\n */\n\nAssemble.extend(Generate);\n\n/**\n * Initialize Stores\n */\n\nplugins.stores(Generate.prototype);\n\n/**\n * Initialize generate defaults\n */\n\nGenerate.prototype.initGenerate = function(opts) {\n  debug('initializing from <%s>', __filename);\n  Generate.emit('generate.preInit', this);\n\n  // initialize defaults\n  defaults(Generate, this);\n\n  // load listeners\n  Generate.initGenerateListeners(this);\n\n  // load middleware\n  if (!process.env.GENERATE_TEST) {\n    Generate.initGenerateMiddleware(this);\n  }\n\n  // load CLI plugins\n  if (utils.runnerEnabled(this)) {\n    this.initGenerateCLI(opts);\n  }\n  Generate.emit('generate.postInit', this);\n};\n\n/**\n * Initialize CLI-specific plugins and view collections.\n */\n\nGenerate.prototype.initGenerateCLI = function(options) {\n  Generate.initGenerateCLI(this, options);\n};\n\n/**\n * Temporary error handler method. until we implement better errors.\n *\n * @param {Object} `err` Object or instance of `Error`.\n * @return {Object} Returns an error object, or emits `error` if a listener exists.\n */\n\nGenerate.prototype.handleErr = function(err) {\n  return Generate.handleErr(this, err);\n};\n\n/**\n * Add static methods\n */\n\nmixins(Generate);\n\n/**\n * Expose the `Generate` constructor\n */\n\nmodule.exports = Generate;\n","/home/travis/build/npmtest/node-npmtest-generate/node_modules/generate/lib/defaults.js":"'use strict';\n\nvar os = require('os');\nvar path = require('path');\nvar plugins = require('./plugins');\nvar utils = require('./utils');\n\nmodule.exports = function(Generate, app) {\n  var re = /^(base|generate|helper|updater|(assemble|verb)(?:-generate)?)-/;\n  app.define('aliasRegex', re);\n  var common;\n\n  app.cwd = app.options.dest || app.cwd;\n  app.data('dest', app.cwd);\n\n  // custom lookup function for resolving generators\n  app.option('lookup', Generate.lookup);\n\n  // custom `toAlias` function for resolving generators by alias\n  app.option('toAlias', function(key) {\n    return key.replace(app.get('aliasRegex'), '');\n  });\n\n  // format help menu\n  app.option('help', {\n    command: 'gen',\n    configname: 'generator',\n    appname: 'generate'\n  });\n\n  app.define('home', function() {\n    var args = [].slice.call(arguments);\n    var home = path.resolve(app.options.homedir || os.homedir());\n    return path.resolve.apply(path, [home].concat(args));\n  });\n\n  Object.defineProperty(app, 'common', {\n    configurable: true,\n    set: function(val) {\n      common = val;\n    },\n    get: function() {\n      return common || (common = utils.common);\n    }\n  });\n\n  // register async `ask` helper\n  app.asyncHelper('ask', utils.ask(app));\n\n  // load plugins\n  app.use(plugins.store('generate'));\n  app.use(plugins.generators());\n  app.use(plugins.pipeline());\n  app.use(utils.askWhen());\n};\n","/home/travis/build/npmtest/node-npmtest-generate/node_modules/generate/lib/plugins.js":"'use strict';\n\nvar path = require('path');\nvar utils = require('./utils');\nvar plugins = require('lazy-cache')(require);\nvar fn = require;\nrequire = plugins; // eslint-disable-line\nvar stores = {};\n\n/**\n * Plugins\n */\n\nrequire('assemble-loader', 'loader');\nrequire('base-fs-conflicts', 'conflicts');\nrequire('base-fs-rename', 'rename');\nrequire('base-generators', 'generators');\nrequire('base-npm', 'npm');\nrequire('base-npm-prompt', 'prompt');\nrequire('base-pipeline', 'pipeline');\nrequire('base-questions', 'questions');\nrequire('base-runtimes', 'runtimes');\nrequire('base-runner', 'runner');\nrequire('base-store', 'store');\nrequire = fn; // eslint-disable-line\n\n/**\n * Add logging methods\n */\n\nplugins.logger = function(options) {\n  return function() {\n\n    function logger(prop, color) {\n      color = color || 'dim';\n      return function(msg) {\n        var rest = [].slice.call(arguments, 1);\n        return console.log\n          .bind(console, utils.log.timestamp + (prop ? (' ' + utils.log[prop]) : ''))\n          .apply(console, [utils.log[color](msg)].concat(rest));\n      };\n    };\n\n    Object.defineProperty(this, 'log', {\n      configurable: true,\n      get: function() {\n        function log() {\n          return console.log.apply(console, arguments);\n        }\n        log.path = function(msg) {\n          return logger(null, 'dim').apply(null, arguments);\n        };\n        log.time = function(msg) {\n          return logger(null, 'dim').apply(null, arguments);\n        };\n        log.warn = function(msg) {\n          return logger('warning').apply(null, arguments);\n        };\n        log.warning = function(msg) {\n          return logger('warning', 'yellow').apply(null, arguments);\n        };\n        log.success = function() {\n          return logger('success', 'green').apply(null, arguments);\n        };\n        log.info = function() {\n          return logger('info', 'cyan').apply(null, arguments);\n        };\n        log.error = function() {\n          return logger('error', 'red').apply(null, arguments);\n        };\n        log.__proto__ = utils.log;\n        return log;\n      }\n    });\n  };\n};\n\n/**\n * Initialize stores\n */\n\nplugins.stores = function(proto) {\n  // create `macros` store\n  Object.defineProperty(proto, 'macros', {\n    configurable: true,\n    set: function(val) {\n      stores.macros = val;\n    },\n    get: function() {\n      return stores.macros || (stores.macros = new utils.MacroStore({name: 'generate-macros'}));\n    }\n  });\n\n  // create `app.globals` store\n  Object.defineProperty(proto, 'globals', {\n    configurable: true,\n    set: function(val) {\n      stores.globals = val;\n    },\n    get: function() {\n      return stores.globals || (stores.globals = new utils.Store('generate-globals'));\n    }\n  });\n};\n\n/**\n * Results the dest path to use\n */\n\nplugins.destPath = function(options) {\n  return function() {\n    Object.defineProperty(this, 'destBase', {\n      configurable: true,\n      enumerable: true,\n      set: function(dest) {\n        this.cache.dest = path.resolve(dest);\n      },\n      get: function() {\n        if (typeof this.cache.dest === 'string') {\n          return path.resolve(this.cache.dest);\n        }\n        if (typeof this.options.dest === 'string') {\n          return path.resolve(this.options.dest);\n        }\n        return process.cwd();\n      }\n    });\n  };\n};\n\nplugins.dest = function(options) {\n  return function(app) {\n    var dest = this.dest;\n\n    this.define('dest', function(dir, options) {\n      var opts = utils.extend({ cwd: this.cwd }, options);\n      if (typeof dir !== 'function' && typeof this.rename === 'function') {\n        dir = this.rename(dir);\n      }\n      return dest.call(this, dir, opts);\n    });\n  };\n};\n\nplugins.src = function(collection) {\n  return function(app) {\n    collection = collection || 'templates';\n    var src = this.src;\n\n    this.define('src', function(patterns, options) {\n      var opts = utils.extend({}, options);\n      if (typeof opts.collection === 'undefined') {\n        opts.collection = collection;\n      }\n      return src.call(this, patterns, opts);\n    });\n  };\n};\n\n/**\n * Expose plugins\n */\n\nmodule.exports = plugins;\n","/home/travis/build/npmtest/node-npmtest-generate/node_modules/generate/lib/utils.js":"'use strict';\n\nvar path = require('path');\nvar utils = require('lazy-cache')(require);\nvar fn = require;\nrequire = utils; // eslint-disable-line\n\n/**\n * Utils\n */\n\nrequire('ask-when');\nrequire('common-config', 'common');\nrequire('data-store', 'Store');\nrequire('define-property', 'define');\nrequire('extend-shallow', 'extend');\nrequire('fs-exists-sync', 'exists');\nrequire('get-value', 'get');\nrequire('global-modules', 'gm');\nrequire('helper-ask', 'ask');\nrequire('isobject', 'isObject');\nrequire('log-utils', 'log');\nrequire('macro-store', 'macros');\nrequire('resolve-file', 'resolve');\nrequire('strip-color', 'strip');\nrequire('text-table', 'table');\nrequire('through2', 'through');\nrequire('yargs-parser', 'parse');\nrequire = fn;\n\n/**\n * argv options\n */\n\nutils.opts = {\n  boolean: ['diff'],\n  alias: {\n    add: 'a',\n    config: 'c',\n    configfile: 'f',\n    dest: 'd',\n    diff: 'diffOnly',\n    global: 'g',\n    help: 'h',\n    init: 'i',\n    silent: 'S',\n    verbose: 'v',\n    version: 'V',\n    remove: 'r'\n  }\n};\n\n/**\n * Expose parsed `argv` and `args`\n */\n\nutils.blacklist = [\n  'generate-foo',\n  'generate-bar',\n  'generate-function',\n  'generate-object-property'\n];\n\nutils.parseArgs = function(argv) {\n  var parse = utils.macros('generate-macro-store');\n  var obj = parse(argv, utils.opts);\n\n  for (var key in obj) {\n    var val = obj[key];\n    if (/^no\\w/.test(key)) {\n      obj[key.slice(2)] = !val;\n    }\n  }\n\n  if (obj.init) {\n    obj._.push('init');\n    delete obj.init;\n  }\n  if (obj.help) {\n    obj._.push('help');\n    delete obj.help;\n  }\n  return obj;\n};\n\nutils.args = process.argv.slice(2);\nutils._argv = utils.parseArgs(utils.args);\nutils.argv = {};\n\nfor (var key in utils._argv) {\n  if (utils._argv.hasOwnProperty(key)) {\n    utils.argv[key] = utils._argv[key];\n  }\n}\n\nutils.arrayify = function(val) {\n  return val ? (Array.isArray(val) ? val : [val]) : [];\n};\n\nutils.renameKey = function(app) {\n  var fn = app.options.renameKey;\n  if (typeof fn !== 'function') {\n    fn = function(key, file) {\n      return file ? file.basename : path.basename(key);\n    };\n  }\n  return fn;\n};\n\nutils.getTasks = function(configFile, arrays) {\n  arrays = utils.arrayify(arrays);\n  var tasks = [];\n\n  if (configFile) {\n    tasks = utils.arrayify(arrays[0]);\n    return tasks.length >= 1 ? tasks : ['default'];\n  }\n\n  for (var i = 0; i < arrays.length; i++) {\n    var arr = utils.arrayify(arrays[i]);\n    // if `default` task is defined, continue\n    if (arr.length === 1 && arr[0] === 'default') {\n      continue;\n    }\n    // if nothing is defined, continue\n    if (arr.length === 0) {\n      continue;\n    }\n    tasks = arr;\n    break;\n  }\n  return tasks;\n};\n\nutils.firstIndex = function(arr, items) {\n  items = utils.arrayify(items);\n  var idx = -1;\n  for (var i = 0; i < arr.length; i++) {\n    if (items.indexOf(arr[i]) !== -1) {\n      idx = i;\n      break;\n    }\n  }\n  return idx;\n};\n\n/**\n * Return true if the generate CLI is enabled\n */\n\nutils.runnerEnabled = function(app) {\n  if (app.options.cli === true || process.env.GENERATE_CLI === 'true') {\n    return true;\n  }\n  // if run from the generate cwd (and not using the `gen` command)\n  if (process.cwd() === path.resolve(__dirname, '..')) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Lazily expose a property on `app.cache.data`\n */\n\nutils.lazyData = function(app, key, fn) {\n  var cached;\n  Object.defineProperty(app.cache.data, key, {\n    set: function(val) {\n      cached = val;\n    },\n    get: function() {\n      return cached || (cached = fn.call(this));\n    }\n  });\n};\n\n/**\n * Expose utils\n */\n\nmodule.exports = utils;\n","/home/travis/build/npmtest/node-npmtest-generate/node_modules/generate/lib/mixins.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar plugins = require('./plugins');\nvar utils = require('./utils');\n\n/**\n * Static methods\n */\n\nmodule.exports = function(Generate) {\n\n  /**\n   * Initialize middleware\n   */\n\n  Generate.initGenerateMiddleware = function(app) {\n    app.preWrite(/./, function(view, next) {\n      var askName = view.data && view.data.ask;\n      var hint = view.basename;\n      if (utils.isObject(askName)) {\n        var obj = askName;\n        hint = obj.default || hint;\n        askName = obj.rename;\n      }\n\n      function setValue(obj) {\n        var key = askName;\n        var val = obj[key];\n        if (val) view[key] = val;\n        if (key === 'path') {\n          view.base = path.dirname(view.path);\n          app.options.dest = view.base;\n        }\n      }\n\n      if (typeof askName === 'string') {\n        if (utils.argv[askName]) {\n          setValue(utils.argv);\n          next();\n          return;\n        }\n\n        app.question(askName, `What is the file.${askName}?`, {default: hint});\n        app.askWhen(askName, {save: false}, function(err, answers) {\n          if (err) return next(err);\n          if (answers[askName]) {\n            setValue(answers);\n          }\n          next();\n        });\n      } else {\n        next();\n      }\n    });\n\n    app.onLoad(/(^|[\\\\\\/])templates[\\\\\\/]/, function(file, next) {\n      var userDefined = app.home('templates', file.relative);\n      if (utils.exists(userDefined)) {\n        file.contents = fs.readFileSync(userDefined);\n      } else {\n        userDefined = app.home('templates', file.basename)\n        if (utils.exists(userDefined)) {\n          file.contents = fs.readFileSync(userDefined);\n        }\n      }\n      if (/^templates[\\\\\\/]/.test(file.relative)) {\n        file.path = path.join(app.cwd, file.basename);\n      }\n      next(null, file);\n    });\n  };\n\n  /**\n   * Initialize plugins for CLI\n   */\n\n  Generate.initGenerateCLI = function(app, options) {\n    var opts = {globals: this.globals, store: this.store};\n    plugins.runner.loadPlugins(app);\n    app.use(plugins.logger());\n    app.use(plugins.questions(opts));\n    app.use(plugins.rename({replace: true}));\n    app.use(plugins.conflicts(options));\n    app.use(plugins.runtimes(options));\n    app.use(plugins.loader());\n    app.use(plugins.npm());\n    app.use(plugins.prompt());\n\n    // built-in view collections\n    app.create('templates');\n  };\n\n  /**\n   * Initialize listeners\n   */\n\n  Generate.initGenerateListeners = function(app) {\n    function logger() {\n      if (utils.argv.silent || app.options.silent) return;\n      console.log.apply(console, arguments);\n    }\n\n    app.on('build', function(event, build) {\n      if (build && event === 'starting' || event === 'finished') {\n        if (build.isSilent) return;\n        var prefix = event === 'finished' ? utils.log.success + ' ' : '';\n        var key = build.key.replace(/generate\\./, '');\n        logger(utils.log.timestamp, event, key, prefix + utils.log.red(build.time));\n      }\n    });\n\n    app.on('task', function(event, task) {\n      if (task && task.app) {\n        task.app.cwd = app.base.cwd;\n      }\n      if (task && event === 'starting' || event === 'finished') {\n        if (task.isSilent) return;\n        var key = task.key.replace(/generate\\./, '');\n        logger(utils.log.timestamp, event, key, utils.log.red(task.time));\n      }\n    });\n\n    app.on('task:starting', function(event, task) {\n      if (task && task.app) task.app.cwd = app.base.cwd;\n    });\n\n    app.on('option', function(key, val) {\n      if (key === 'dest') {\n        app.base.cwd = val;\n        app.cwd = val;\n        app.data('dest', val);\n      }\n    });\n\n    app.on('generator', function(generator) {\n      generator.data('alias', generator.env.alias || generator.cache.data.alias);\n    });\n\n    app.on('ask', function(val, key, question, answers) {\n      if (typeof val === 'undefined') {\n        val = question.default;\n      }\n      if (typeof val === 'undefined') {\n        val = question.default = app.cache.answers[key] || app.common.get(key);\n      }\n      if (typeof val !== 'undefined') {\n        app.base.data(key, val);\n      }\n    });\n\n    app.on('unresolved', function(search, app) {\n      if (!/(verb-)?generate-/.test(search.name)) return;\n      var opts = {cwd: utils.gm};\n      var resolved = utils.resolve.file(search.name) || utils.resolve.file(search.name, opts);\n      if (resolved) {\n        search.app = app.register(search.name, require(resolved.path));\n      }\n    });\n  };\n\n  /**\n   * Temporary error handler method. until we implement better errors.\n   *\n   * @param {Object} `err` Object or instance of `Error`.\n   * @return {Object} Returns an error object, or emits `error` if a listener exists.\n   */\n\n  Generate.handleErr = function(app, err) {\n    if (!(err instanceof Error)) {\n      err = new Error(err.toString());\n    }\n\n    if (utils.isObject(app) && app.isApp) {\n      if (app.options.verbose) {\n        err = err.stack;\n      }\n\n      if (app.hasListeners('error')) {\n        app.emit('error', err);\n      } else {\n        throw err;\n      }\n    } else {\n      throw err;\n    }\n  };\n\n  /**\n   * Custom lookup function for resolving generators\n   */\n\n  Generate.lookup = function(key) {\n    if (!/generate-/.test(key) && key !== 'default') {\n      return [`generate-${key}`];\n    }\n    return [key];\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-generate/node_modules/generate/lib/commands.js":"'use strict';\n\nvar commands = require('./commands/');\n\nmodule.exports = function(app, options) {\n  for (var key in commands) {\n    if (commands.hasOwnProperty(key)) {\n      app.cli.map(key, commands[key](app, options));\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generate/node_modules/generate/lib/commands/index.js":"module.exports = require('export-files')(__dirname);\n","/home/travis/build/npmtest/node-npmtest-generate/node_modules/generate/lib/commands/silent.js":"'use strict';\n\nmodule.exports = function(app) {\n  return function(val, key, config, next) {\n    app.enable('silent');\n    next();\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-generate/node_modules/generate/lib/commands/version.js":"'use strict';\n\nvar pkg = require('../../package');\n\nmodule.exports = function(app) {\n  return function(val, key, config, next) {\n    console.log(app.log.cyan(`${app._name} v${pkg.version}`));\n    process.exit();\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-generate/node_modules/generate/lib/generator.js":"'use strict';\n\nvar path = require('path');\nvar utils = require('./utils');\nvar list = require('./list');\n\nmodule.exports = function(app, base, env, options) {\n  var gm = path.resolve.bind(path, utils.gm);\n  var cwd = path.resolve.bind(path, app.cwd);\n\n  /**\n   * Register sub-generators (as plugins)\n   */\n\n  app.use(require('generate-collections'));\n  app.use(require('generate-defaults'));\n\n  /**\n   * Generate an `assemblefile.js`\n   */\n\n  app.task('new', function(cb) {\n    app.src('templates/generator.js', {cwd: __dirname})\n      .pipe(app.dest(app.options.dest || app.cwd))\n      .on('end', function() {\n        console.log(utils.log.timestamp, 'created generator.js');\n        cb();\n      });\n  });\n\n  /**\n   * Display a list of installed generators.\n   *\n   * ```sh\n   * $ gen list\n   * ```\n   * @name list\n   * @api public\n   */\n\n  app.task('list', { silent: true }, function() {\n    return app.src([gm('generate-*'), cwd('node_modules/generate-*')])\n      .pipe(utils.through.obj(function(file, enc, next) {\n        file.alias = app.toAlias(file.basename);\n        next(null, file);\n      }))\n      .pipe(list(app));\n  });\n\n  app.task('tasks', { silent: true }, function(cb) {\n    Object.keys(app.tasks).forEach(function(name) {\n      console.log(' · ' + app.log.cyan(name));\n    });\n    cb();\n  });\n\n  /**\n   * Display `--help`.\n   *\n   * ```sh\n   * $ gen defaults:help\n   * ```\n   * @name help\n   * @api public\n   */\n\n  app.task('help', { silent: true }, function(cb) {\n    app.enable('silent');\n    app.cli.process({ help: true }, cb);\n  });\n\n  /**\n   * Render a single `--src` file to the given `--dest` or current working directory.\n   *\n   * ```sh\n   * $ gen defaults:render\n   * # aliased as\n   * $ gen render\n   * ```\n   * @name render\n   * @api public\n   */\n\n  app.task('render', function(cb) {\n    if (!app.option('src')) {\n      app.emit('error', new Error('Expected a `--src` filepath'));\n    } else if (!app.option('dest')) {\n      app.build(['dest', 'render'], cb);\n    } else {\n      file(app, app.option('src'), app.cwd, cb);\n    }\n  });\n\n  /**\n   * Default task\n   */\n\n  app.task('default', ['help']);\n};\n\nfunction file(app, name, templates, dest, cb) {\n  if (typeof dest === 'function') {\n    cb = dest;\n    dest = null;\n  }\n\n  dest = dest || app.option('dest') || '';\n  app.src(name, {cwd: templates})\n    .pipe(app.renderFile('*'))\n    .pipe(app.conflicts(dest))\n    .pipe(app.dest(dest))\n    .on('error', cb)\n    .on('end', cb);\n}\n","/home/travis/build/npmtest/node-npmtest-generate/node_modules/generate/lib/list.js":"'use strict';\n\nvar path = require('path');\nvar utils = require('./utils');\n\nmodule.exports = function(app) {\n  function bold(str) {\n    return app.log.underline(app.log.bold(str));\n  }\n\n  var list = [[bold('version'), bold('name'), bold('alias')]];\n  var cache = {};\n\n  return utils.through.obj(function(file, enc, next) {\n    if (cache[file.stem]) {\n      next();\n      return;\n    }\n\n    cache[file.stem] = true;\n    if (utils.blacklist.indexOf(file.stem) !== -1) {\n      next();\n      return;\n    }\n\n    var pkgPath = path.resolve(file.path, 'package.json');\n    var pkg = require(pkgPath);\n    list.push([app.log.gray(pkg.version), file.basename, app.log.cyan(file.alias)]);\n    next();\n  }, function(cb) {\n    console.log();\n    console.log(utils.table(list, {\n      stringLength: function(str) {\n        return utils.strip(str).length;\n      }\n    }));\n\n    console.log();\n    console.log(app.log.magenta(list.length + ' generators installed'));\n    console.log();\n    cb();\n  });\n};\n\n","/home/travis/build/npmtest/node-npmtest-generate/node_modules/generate/lib/tasks.js":"'use strict';\n\nvar utils = require('./utils');\n\n/**\n * Determine the task to run. This is only temporary until we get\n * generators published for handling the built-in tasks.\n */\n\nmodule.exports = function(app, ctx, argv) {\n  var configFile = ctx.env.configFile;\n\n  // determine the tasks to run (returns the first value that isn't `[\"default\"]` or `[]`)\n  var tasks = utils.getTasks(configFile, [\n    argv._, // command line\n    ctx.pkgConfig.tasks, // set in package.json\n    app.store.get('defaultTasks') // stored user-defined \"default\" tasks\n  ]);\n\n  tasks = tasks || [];\n\n  // no tasks are defined\n  if (tasks.length === 0) {\n    // if `generator.js` exists in cwd, call it's default task\n    if (utils.exists(configFile)) {\n      return ['default:default'];\n    }\n    return ['defaults:help'];\n  }\n\n  // at least one task was defined\n  tasks = tasks.reduce(function(acc, name) {\n    if (name.indexOf('help') === 0) {\n      return acc.concat('defaults:help');\n    }\n    if (name.indexOf('list') === 0) {\n      return acc.concat('defaults:list');\n    }\n    if (name.indexOf('tasks') === 0) {\n      return acc.concat('defaults:tasks');\n    }\n    if (name.indexOf('store') === 0) {\n      return acc.concat('defaults.' + name);\n    }\n    acc.push(name);\n    return acc;\n  }, []);\n\n  if (tasks.length === 1) {\n    var task = tasks[0];\n    switch (task) {\n      case 'default':\n        // if a `generator.js` exists in user's cwd, run its default task\n        if (utils.exists(configFile)) {\n          return ['default:default'];\n        }\n        // fall through\n      case 'help':\n        return ['defaults:help'];\n      case 'new':\n        return ['defaults:new'];\n      case 'render':\n        return ['defaults:render'];\n      default:\n        return tasks;\n    }\n  }\n  return tasks;\n};\n"}